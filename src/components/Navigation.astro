---
// @ts-expect-error
import { site } from "../data.yaml";
import svgReference from "/favicon.svg";

interface Link {
	text: string;
	href: string;
}
interface Props {
	title?: string;
	icon?: string;
	links?: Link[];
	always_accent?: string;
}
const {
	title = "Conshelv",
	icon = svgReference,
	links = [],
	always_accent = "false",
} = Astro.props;
---

<script>
	class NavSwitcher extends HTMLElement {
		get stay_accent() {
			return this.getAttribute("stay_accent");
		}

		set stay_accent(val) {
			if (val == null) {
				// check for null and undefined
				this.removeAttribute("stay_accent");
			} else {
				this.setAttribute("stay_accent", val);
			}
		}

		switchNav() {
			if (this.stay_accent == "true") {
				return;
			}
			const hidden = this.querySelectorAll("ul")[1];
			const title = this.querySelector("h1");

			hidden?.classList.toggle("hidden");
			this.classList.toggle("bg-accent-content");
			this.classList.toggle("bg-black/10");
			this.classList.toggle("text-accent-content");
			//title?.classList.toggle("font-bold");
			title?.classList.toggle("text-accent-content");
			title?.classList.toggle("text-accent-content");
			this.isSwitched = !this.isSwitched;
		}
		isSwitched = false;

		constructor() {
			super();

			if (this.stay_accent == "true") {
				const hidden = this.querySelectorAll("ul")[1];
				const title = this.querySelector("h1");
				this.classList.toggle("bg-accent-content");
				this.classList.toggle("bg-black/10");
				this.classList.toggle("text-accent-content");
				//title?.classList.toggle("font-bold");
				title?.classList.toggle("text-accent-content");
				title?.classList.toggle("text-accent-content");
			}

			const button = this.querySelector("button");
			button?.addEventListener("click", () => {
				this.switchNav();
			});

			addEventListener("resize", (event) => {
				if (this.isSwitched) {
					this.switchNav();
				}
			});
		}
	}

	customElements.define("nav-switcher", NavSwitcher);
</script>
<!--DERIVED FROM MAMBA UI -->
<nav class="bg-transparent w-full">
	<nav-switcher
		stay_accent={always_accent}
		class="flex flex-col p-4 pt-6 pb-6 px-12 bg-black/10 backdrop-blur-[3px]"
	>
		<div class="flex justify-between h-16">
			<a
				rel="noopener noreferrer"
				href="/"
				aria-label="Back to homepage"
				class="flex flex-row place-items-center p-2"
			>
				<object class="w-16 h-16" data={icon} type="image/svg+xml"
				></object>
				<h1 class="pt-2 ml-4 text-4xl text-neutral font-bold">
					{title}
				</h1>
			</a>
			<ul class="items-stretch hidden space-x-3 md:flex">
				<li class="flex">
					{
						links.map(({ text, href }) => (
							<a
								rel="noopener noreferrer"
								href={href}
								class="flex items-center px-4 -mb-1 border-b-2 border-solid text-neutral text-lg border-transparent hover:border-accent"
								set:html={text}
							/>
						))
					}
				</li>
			</ul>

			<button
				class="flex justify-center place-self-center p-4 md:hidden text-white"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
					class="w-6 h-6"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M4 6h16M4 12h16M4 18h16"></path>
				</svg>
			</button>
		</div>
		<ul class="items-stretch hidden space-x-3 md:hidden">
			<div class="flex flex-col place-items-center">
				<li
					class="flex flex-col justify-start content-start items-start"
				>
					<div class="mb-4"></div>
					{
						links.map(({ text, href }) => (
							<a
								rel="noopener noreferrer"
								href={href}
								class="flex items-center py-2 border-b-2 border-accent dark:border-transparent text-neutral hover:underline"
								set:html={text}
							/>
						))
					}
				</li>
			</div>
		</ul>
	</nav-switcher>
</nav>
